// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.parquet;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;

import static org.bytedeco.arrow.global.parquet.*;


/** EXPERIMENTAL: Properties for configuring FileReader behavior. */
@Namespace("parquet") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.parquet.class)
public class ArrowReaderProperties extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ArrowReaderProperties(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ArrowReaderProperties(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ArrowReaderProperties position(long position) {
        return (ArrowReaderProperties)super.position(position);
    }

  public ArrowReaderProperties(@Cast("bool") boolean use_threads/*=parquet::kArrowDefaultUseThreads*/) { super((Pointer)null); allocate(use_threads); }
  private native void allocate(@Cast("bool") boolean use_threads/*=parquet::kArrowDefaultUseThreads*/);
  public ArrowReaderProperties() { super((Pointer)null); allocate(); }
  private native void allocate();

  public native void set_use_threads(@Cast("bool") boolean use_threads);

  public native @Cast("bool") boolean use_threads();

  public native void set_read_dictionary(int column_index, @Cast("bool") boolean read_dict);
  public native @Cast("bool") boolean read_dictionary(int column_index);

  public native void set_batch_size(@Cast("int64_t") long batch_size);

  public native @Cast("int64_t") long batch_size();
}
