// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.parquet;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;

import static org.bytedeco.arrow.global.parquet.*;


// Builder API
@Namespace("parquet") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.parquet.class)
public class ColumnChunkMetaDataBuilder extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ColumnChunkMetaDataBuilder(Pointer p) { super(p); }

  // API convenience to get a MetaData reader
  public static native @UniquePtr ColumnChunkMetaDataBuilder Make(
        @SharedPtr WriterProperties props, @Const ColumnDescriptor column);

  public static native @UniquePtr ColumnChunkMetaDataBuilder Make(
        @SharedPtr WriterProperties props, @Const ColumnDescriptor column,
        Pointer contents);

  // column chunk
  // Used when a dataset is spread across multiple files
  public native void set_file_path(@StdString String path);
  public native void set_file_path(@StdString BytePointer path);
  // column metadata
  public native void SetStatistics(@Const @ByRef EncodedStatistics stats);
  // get the column descriptor
  public native @Const ColumnDescriptor descr();
  // commit the metadata
  public native void Finish(@Cast("int64_t") long num_values, @Cast("int64_t") long dictonary_page_offset,
                @Cast("int64_t") long index_page_offset, @Cast("int64_t") long data_page_offset,
                @Cast("int64_t") long compressed_size, @Cast("int64_t") long uncompressed_size, @Cast("bool") boolean has_dictionary,
                @Cast("bool") boolean dictionary_fallback);

  // The metadata contents, suitable for passing to ColumnChunkMetaData::Make
  public native @Const Pointer contents();

  // For writing metadata at end of column chunk
  public native void WriteTo(org.bytedeco.arrow.OutputStream sink);
}
