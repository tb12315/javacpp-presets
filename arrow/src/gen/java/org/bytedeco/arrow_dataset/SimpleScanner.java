// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow_dataset;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;
import org.bytedeco.parquet.*;
import static org.bytedeco.arrow.global.parquet.*;

import static org.bytedeco.arrow.global.arrow_dataset.*;


/** \brief SimpleScanner is a trivial Scanner implementation that flattens
 *  chained iterators.
 * 
 *  The returned iterator of SimpleScanner::Scan is a serial blocking
 *  iterator. It will block if any of the following methods blocks:
 *   - Iterator::Next
 *   - DataSource::GetFragments
 *   - DataFragment::Scan
 * 
 *  Thus, this iterator is not suited for consumption of sources/fragments
 *  where the previous methods can block for a long time, e.g. if fetching a
 *  DataFragment from cloud storage, or a DataFragment must be parsed before
 *  returning a ScanTaskIterator. */
@Namespace("arrow::dataset") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow_dataset.class)
public class SimpleScanner extends Scanner {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SimpleScanner(Pointer p) { super(p); }

  public SimpleScanner(@ByVal DataSourceVector sources,
                  @SharedPtr ScanOptions options,
                  @SharedPtr ScanContext context) { super((Pointer)null); allocate(sources, options, context); }
  private native void allocate(@ByVal DataSourceVector sources,
                  @SharedPtr ScanOptions options,
                  @SharedPtr ScanContext context);

  public native @ByVal ScanTaskIterator Scan();
}
