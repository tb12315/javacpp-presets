// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow_flight;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;

import static org.bytedeco.arrow.global.arrow_flight.*;


/** \brief A basic implementation of FlightDataStream that will provide
 *  a sequence of FlightData messages to be written to a gRPC stream */
@Namespace("arrow::flight") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow_flight.class)
public class RecordBatchStream extends FlightDataStream {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RecordBatchStream(Pointer p) { super(p); }

  /** @param reader [in] produces a sequence of record batches
   *  @param pool [in,out] a MemoryPool to use for allocations */
  public RecordBatchStream(@SharedPtr RecordBatchReader reader,
                               MemoryPool pool/*=arrow::default_memory_pool()*/) { super((Pointer)null); allocate(reader, pool); }
  private native void allocate(@SharedPtr RecordBatchReader reader,
                               MemoryPool pool/*=arrow::default_memory_pool()*/);
  public RecordBatchStream(@SharedPtr RecordBatchReader reader) { super((Pointer)null); allocate(reader); }
  private native void allocate(@SharedPtr RecordBatchReader reader);

  public native @SharedPtr Schema schema();
  public native @ByVal Status GetSchemaPayload(FlightPayload payload);
  public native @ByVal Status Next(FlightPayload payload);
}
