// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow::csv") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class ParseOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ParseOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ParseOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ParseOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ParseOptions position(long position) {
        return (ParseOptions)super.position(position);
    }

  // Parsing options

  /** Field delimiter */
  public native @Cast("char") byte delimiter(); public native ParseOptions delimiter(byte setter);
  /** Whether quoting is used */
  public native @Cast("bool") boolean quoting(); public native ParseOptions quoting(boolean setter);
  /** Quoting character (if {@code quoting} is true) */
  public native @Cast("char") byte quote_char(); public native ParseOptions quote_char(byte setter);
  /** Whether a quote inside a value is double-quoted */
  public native @Cast("bool") boolean double_quote(); public native ParseOptions double_quote(boolean setter);
  /** Whether escaping is used */
  public native @Cast("bool") boolean escaping(); public native ParseOptions escaping(boolean setter);
  /** Escaping character (if {@code escaping} is true) */
  public native @Cast("char") byte escape_char(); public native ParseOptions escape_char(byte setter);
  /** Whether values are allowed to contain CR (0x0d) and LF (0x0a) characters */
  public native @Cast("bool") boolean newlines_in_values(); public native ParseOptions newlines_in_values(boolean setter);
  /** Whether empty lines are ignored.  If false, an empty line represents
   *  a single empty value (assuming a one-column CSV file). */
  public native @Cast("bool") boolean ignore_empty_lines(); public native ParseOptions ignore_empty_lines(boolean setter);

  /** Create parsing options with default values */
  public static native @ByVal ParseOptions Defaults();
}
