// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.arrow.global.arrow.*;


/** \brief EXPERIMENTAL: abstract file system API */
@Namespace("arrow::fs") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class FileSystem extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FileSystem(Pointer p) { super(p); }


  /** Get statistics for the given target.
   * 
   *  Any symlink is automatically dereferenced, recursively.
   *  A non-existing or unreachable file returns an Ok status and
   *  has a FileType of value NonExistent.  An error status indicates
   *  a truly exceptional condition (low-level I/O error, etc.). */
  public native @ByVal Status GetTargetStats(@StdString String path, FileStats out);
  public native @ByVal Status GetTargetStats(@StdString BytePointer path, FileStats out);
  /** Same, for many targets at once. */
  
  ///
  public native @ByVal Status GetTargetStats(@Const @ByRef StringVector paths,
                                  @StdVector FileStats out);
  /** Same, according to a selector.
   * 
   *  The selector's base directory will not be part of the results, even if
   *  it exists.
   *  If it doesn't exist, see {@code Selector::allow_non_existent}. */
  
  ///
  public native @ByVal Status GetTargetStats(@Const @ByRef Selector select, @StdVector FileStats out);

  /** Create a directory and subdirectories.
   * 
   *  This function succeeds if the directory already exists. */
  public native @ByVal Status CreateDir(@StdString String path, @Cast("bool") boolean recursive/*=true*/);
  public native @ByVal Status CreateDir(@StdString String path);
  public native @ByVal Status CreateDir(@StdString BytePointer path, @Cast("bool") boolean recursive/*=true*/);
  public native @ByVal Status CreateDir(@StdString BytePointer path);

  /** Delete a directory and its contents, recursively. */
  
  ///
  public native @ByVal Status DeleteDir(@StdString String path);
  public native @ByVal Status DeleteDir(@StdString BytePointer path);

  /** Delete a directory's contents, recursively.
   * 
   *  Like DeleteDir, but doesn't delete the directory itself.
   *  Passing an empty path ("") will wipe the entire filesystem tree. */
  public native @ByVal Status DeleteDirContents(@StdString String path);
  public native @ByVal Status DeleteDirContents(@StdString BytePointer path);

  /** Delete a file. */
  
  ///
  public native @ByVal Status DeleteFile(@StdString String path);
  public native @ByVal Status DeleteFile(@StdString BytePointer path);
  /** Delete many files.
   * 
   *  The default implementation issues individual delete operations in sequence. */
  
  ///
  public native @ByVal Status DeleteFiles(@Const @ByRef StringVector paths);

  /** Move / rename a file or directory.
   * 
   *  If the destination exists:
   *  - if it is a non-empty directory, an error is returned
   *  - otherwise, if it has the same type as the source, it is replaced
   *  - otherwise, behavior is unspecified (implementation-dependent). */
  
  ///
  public native @ByVal Status Move(@StdString String src, @StdString String dest);
  public native @ByVal Status Move(@StdString BytePointer src, @StdString BytePointer dest);

  /** Copy a file.
   * 
   *  If the destination exists and is a directory, an error is returned.
   *  Otherwise, it is replaced. */
  public native @ByVal Status CopyFile(@StdString String src, @StdString String dest);
  public native @ByVal Status CopyFile(@StdString BytePointer src, @StdString BytePointer dest);

  /** Open an input stream for sequential reading. */
  public native @ByVal Status OpenInputStream(@StdString String path,
                                   @SharedPtr InputStream out);
  public native @ByVal Status OpenInputStream(@StdString BytePointer path,
                                   @SharedPtr InputStream out);

  /** Open an input file for random access reading. */
  
  ///
  public native @ByVal Status OpenInputFile(@StdString String path,
                                 @SharedPtr RandomAccessFile out);
  public native @ByVal Status OpenInputFile(@StdString BytePointer path,
                                 @SharedPtr RandomAccessFile out);

  /** Open an output stream for sequential writing.
   * 
   *  If the target already exists, existing data is truncated. */
  
  ///
  public native @ByVal Status OpenOutputStream(@StdString String path,
                                    @SharedPtr OutputStream out);
  public native @ByVal Status OpenOutputStream(@StdString BytePointer path,
                                    @SharedPtr OutputStream out);

  /** Open an output stream for appending.
   * 
   *  If the target doesn't exist, a new empty file is created. */
  public native @ByVal Status OpenAppendStream(@StdString String path,
                                    @SharedPtr OutputStream out);
  public native @ByVal Status OpenAppendStream(@StdString BytePointer path,
                                    @SharedPtr OutputStream out);
}
