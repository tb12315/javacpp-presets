// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.arrow.global.arrow.*;


/** CompareFunction is an interface for Comparisons
 * 
 *  Comparisons take an array and emits a selection vector. The selection vector
 *  is given in the form of a bitmask as a BooleanArray result. */
@Namespace("arrow::compute") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class CompareFunction extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CompareFunction(Pointer p) { super(p); }

  /** Compare an array with a scalar argument. */

  public native @ByVal Status Compare(@Const @ByRef ArrayData array, @Const @ByRef Scalar scalar,
                   @SharedPtr ArrayData output);

  public native @ByVal Status Compare(@Const @ByRef Scalar scalar, @Const @ByRef ArrayData array,
                   @SharedPtr ArrayData output);

  /** Compare an array with an array argument. */

  public native @ByVal Status Compare(@Const @ByRef ArrayData lhs, @Const @ByRef ArrayData rhs,
                   @SharedPtr ArrayData output);

  /** By default, CompareFunction emits a result bitmap. */
  public native @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType out_type();
}
