// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow::io") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class RandomAccessFile extends InputStream {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RandomAccessFile(Pointer p) { super(p); }
    public Seekable asSeekable() { return asSeekable(this); }
    @Namespace public static native @Name("static_cast<arrow::io::Seekable*>") Seekable asSeekable(RandomAccessFile pointer);

  /** Necessary because we hold a std::unique_ptr */

  /** \brief Create an isolated InputStream that reads a segment of a
   *  RandomAccessFile. Multiple such stream can be created and used
   *  independently without interference
   *  @param file [in] a file instance
   *  @param file_offset [in] the starting position in the file
   *  @param nbytes [in] the extent of bytes to read. The file should have
   *  sufficient bytes available */
  public static native @SharedPtr InputStream GetStream(@SharedPtr RandomAccessFile file,
                                                  @Cast("int64_t") long file_offset, @Cast("int64_t") long nbytes);

  
  ///
  public native @ByVal Status GetSize(@Cast("int64_t*") LongPointer size);
  public native @ByVal Status GetSize(@Cast("int64_t*") LongBuffer size);
  public native @ByVal Status GetSize(@Cast("int64_t*") long[] size);

  /** \brief Read nbytes at position, provide default implementations using
   *  Read(...), but can be overridden. The default implementation is
   *  thread-safe. It is unspecified whether this method updates the file
   *  position or not.
   * 
   *  @param position [in] Where to read bytes from
   *  @param nbytes [in] The number of bytes to read
   *  @param bytes_read [out] The number of bytes read
   *  @param out [out] The buffer to read bytes into
   *  @return Status */
  
  ///
  public native @ByVal Status ReadAt(@Cast("int64_t") long _position, @Cast("int64_t") long nbytes, @Cast("int64_t*") LongPointer bytes_read, Pointer out);
  public native @ByVal Status ReadAt(@Cast("int64_t") long _position, @Cast("int64_t") long nbytes, @Cast("int64_t*") LongBuffer bytes_read, Pointer out);
  public native @ByVal Status ReadAt(@Cast("int64_t") long _position, @Cast("int64_t") long nbytes, @Cast("int64_t*") long[] bytes_read, Pointer out);

  /** \brief Read nbytes at position, provide default implementations using
   *  Read(...), but can be overridden. The default implementation is
   *  thread-safe. It is unspecified whether this method updates the file
   *  position or not.
   * 
   *  @param position [in] Where to read bytes from
   *  @param nbytes [in] The number of bytes to read
   *  @param out [out] The buffer to read bytes into. The number of bytes read can be
   *  retrieved by calling Buffer::size(). */
  public native @ByVal Status ReadAt(@Cast("int64_t") long _position, @Cast("int64_t") long nbytes, @SharedPtr ArrowBuffer out);
}
