// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.arrow.global.arrow.*;


/** \brief Streaming decompressor interface
 *  */
@Namespace("arrow::util") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class Decompressor extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Decompressor(Pointer p) { super(p); }


  /** \brief Decompress some input.
   * 
   *  If need_more_output is true on return, a larger output buffer needs
   *  to be supplied.
   *  XXX is need_more_output necessary? (Brotli?) */
  
  ///
  public native @ByVal Status Decompress(@Cast("int64_t") long input_len, @Cast("const uint8_t*") BytePointer input, @Cast("int64_t") long output_len,
                              @Cast("uint8_t*") BytePointer output, @Cast("int64_t*") LongPointer bytes_read, @Cast("int64_t*") LongPointer bytes_written,
                              @Cast("bool*") BoolPointer need_more_output);
  public native @ByVal Status Decompress(@Cast("int64_t") long input_len, @Cast("const uint8_t*") ByteBuffer input, @Cast("int64_t") long output_len,
                              @Cast("uint8_t*") ByteBuffer output, @Cast("int64_t*") LongBuffer bytes_read, @Cast("int64_t*") LongBuffer bytes_written,
                              @Cast("bool*") boolean[] need_more_output);
  public native @ByVal Status Decompress(@Cast("int64_t") long input_len, @Cast("const uint8_t*") byte[] input, @Cast("int64_t") long output_len,
                              @Cast("uint8_t*") byte[] output, @Cast("int64_t*") long[] bytes_read, @Cast("int64_t*") long[] bytes_written,
                              @Cast("bool*") BoolPointer need_more_output);
  public native @ByVal Status Decompress(@Cast("int64_t") long input_len, @Cast("const uint8_t*") BytePointer input, @Cast("int64_t") long output_len,
                              @Cast("uint8_t*") BytePointer output, @Cast("int64_t*") LongPointer bytes_read, @Cast("int64_t*") LongPointer bytes_written,
                              @Cast("bool*") boolean[] need_more_output);
  public native @ByVal Status Decompress(@Cast("int64_t") long input_len, @Cast("const uint8_t*") ByteBuffer input, @Cast("int64_t") long output_len,
                              @Cast("uint8_t*") ByteBuffer output, @Cast("int64_t*") LongBuffer bytes_read, @Cast("int64_t*") LongBuffer bytes_written,
                              @Cast("bool*") BoolPointer need_more_output);
  public native @ByVal Status Decompress(@Cast("int64_t") long input_len, @Cast("const uint8_t*") byte[] input, @Cast("int64_t") long output_len,
                              @Cast("uint8_t*") byte[] output, @Cast("int64_t*") long[] bytes_read, @Cast("int64_t*") long[] bytes_written,
                              @Cast("bool*") boolean[] need_more_output);

  /** \brief Return whether the compressed stream is finished.
   * 
   *  This is a heuristic.  If true is returned, then it is guaranteed
   *  that the stream is finished.  If false is returned, however, it may
   *  simply be that the underlying library isn't able to provide the information. */
  public native @Cast("bool") boolean IsFinished();

  /** \brief Reinitialize decompressor, making it ready for a new compressed stream. */
  public native @ByVal Status Reset();

  // XXX add methods for buffer size heuristics?
}
