// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow::ipc") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class IpcOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public IpcOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public IpcOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IpcOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public IpcOptions position(long position) {
        return (IpcOptions)super.position(position);
    }

  // If true, allow field lengths that don't fit in a signed 32-bit int.
  // Some implementations may not be able to parse such streams.
  public native @Cast("bool") boolean allow_64bit(); public native IpcOptions allow_64bit(boolean setter);
  // The maximum permitted schema nesting depth.
  public native int max_recursion_depth(); public native IpcOptions max_recursion_depth(int setter);

  // Write padding after memory buffers to this multiple of
  // bytes. Generally 8 or 64
  public native int alignment(); public native IpcOptions alignment(int setter);

  /** \brief Write the pre-0.15.0 encapsulated IPC message format
   *  consisting of a 4-byte prefix instead of 8 byte */
  public native @Cast("bool") boolean write_legacy_ipc_format(); public native IpcOptions write_legacy_ipc_format(boolean setter);

  public static native @ByVal IpcOptions Defaults();
}
