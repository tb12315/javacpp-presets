// Targeted by JavaCPP version 1.5.3-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.arrow.global.arrow.*;


/** \brief EXPERIMENTAL: FileSystem entry stats */
@Namespace("arrow::fs") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class FileStats extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FileStats(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FileStats(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public FileStats position(long position) {
        return (FileStats)super.position(position);
    }

  public FileStats() { super((Pointer)null); allocate(); }
  private native void allocate();
  public FileStats(@ByVal FileStats arg0) { super((Pointer)null); allocate(arg0); }
  private native void allocate(@ByVal FileStats arg0);
  public native @ByRef @Name("operator =") FileStats put(@ByVal FileStats arg0);

  /** The file type */
  public native FileType type();
  public native void set_type(FileType type);
  public native void set_type(@Cast("arrow::fs::FileType") byte type);

  /** The full file path in the filesystem */
  public native @StdString String path();
  public native void set_path(@StdString String path);
  public native void set_path(@StdString BytePointer path);

  /** The file base name (component after the last directory separator) */
  public native @StdString String base_name();

  // The directory base name (component before the file base name).
  
  ///
  public native @StdString String dir_name();

  /** The size in bytes, if available
   * 
   *  Only regular files are guaranteed to have a size. */
  public native @Cast("int64_t") long size();
  public native void set_size(@Cast("int64_t") long size);

  /** The file extension (excluding the dot) */
  public native @StdString String extension();

  /** The time of last modification, if available */
  public native @ByVal @Cast("arrow::fs::TimePoint*") Pointer mtime();
  public native void set_mtime(@ByVal @Cast("arrow::fs::TimePoint*") Pointer mtime);

  public native @Cast("bool") boolean IsFile();
  public native @Cast("bool") boolean IsDirectory();

  public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef FileStats other);
}
